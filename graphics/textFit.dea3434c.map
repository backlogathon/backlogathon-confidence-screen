{"version":3,"sources":["../../node_modules/textfit/textFit.js"],"names":[],"mappings":"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","file":"textFit.dea3434c.map","sourceRoot":"..\\src\\graphics","sourcesContent":["/**\n * textFit v2.3.1\n * Previously known as jQuery.textFit\n * 11/2014 by STRML (strml.github.com)\n * MIT License\n *\n * To use: textFit(document.getElementById('target-div'), options);\n *\n * Will make the *text* content inside a container scale to fit the container\n * The container is required to have a set width and height\n * Uses binary search to fit text with minimal layout calls.\n * Version 2.0 does not use jQuery.\n */\n/*global define:true, document:true, window:true, HTMLElement:true*/\n\n(function(root, factory) {\n  \"use strict\";\n\n  // UMD shim\n  if (typeof define === \"function\" && define.amd) {\n    // AMD\n    define([], factory);\n  } else if (typeof exports === \"object\") {\n    // Node/CommonJS\n    module.exports = factory();\n  } else {\n    // Browser\n    root.textFit = factory();\n  }\n\n}(typeof global === \"object\" ? global : this, function () {\n  \"use strict\";\n\n  var defaultSettings = {\n    alignVert: false, // if true, textFit will align vertically using css tables\n    alignHoriz: false, // if true, textFit will set text-align: center\n    multiLine: false, // if true, textFit will not set white-space: no-wrap\n    detectMultiLine: true, // disable to turn off automatic multi-line sensing\n    minFontSize: 6,\n    maxFontSize: 80,\n    reProcess: true, // if true, textFit will re-process already-fit nodes. Set to 'false' for better performance\n    widthOnly: false, // if true, textFit will fit text to element width, regardless of text height\n    alignVertWithFlexbox: false, // if true, textFit will use flexbox for vertical alignment\n  };\n\n  return function textFit(els, options) {\n\n    if (!options) options = {};\n\n    // Extend options.\n    var settings = {};\n    for(var key in defaultSettings){\n      if(options.hasOwnProperty(key)){\n        settings[key] = options[key];\n      } else {\n        settings[key] = defaultSettings[key];\n      }\n    }\n\n    // Convert jQuery objects into arrays\n    if (typeof els.toArray === \"function\") {\n      els = els.toArray();\n    }\n\n    // Support passing a single el\n    var elType = Object.prototype.toString.call(els);\n    if (elType !== '[object Array]' && elType !== '[object NodeList]' &&\n            elType !== '[object HTMLCollection]'){\n      els = [els];\n    }\n\n    // Process each el we've passed.\n    for(var i = 0; i < els.length; i++){\n      processItem(els[i], settings);\n    }\n  };\n\n  /**\n   * The meat. Given an el, make the text inside it fit its parent.\n   * @param  {DOMElement} el       Child el.\n   * @param  {Object} settings     Options for fit.\n   */\n  function processItem(el, settings){\n    if (!isElement(el) || (!settings.reProcess && el.getAttribute('textFitted'))) {\n      return false;\n    }\n\n    // Set textFitted attribute so we know this was processed.\n    if(!settings.reProcess){\n      el.setAttribute('textFitted', 1);\n    }\n\n    var innerSpan, originalHeight, originalHTML, originalWidth;\n    var low, mid, high;\n\n    // Get element data.\n    originalHTML = el.innerHTML;\n    originalWidth = innerWidth(el);\n    originalHeight = innerHeight(el);\n\n    // Don't process if we can't find box dimensions\n    if (!originalWidth || (!settings.widthOnly && !originalHeight)) {\n      if(!settings.widthOnly)\n        throw new Error('Set a static height and width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n      else\n        throw new Error('Set a static width on the target element ' + el.outerHTML +\n          ' before using textFit!');\n    }\n\n    // Add textFitted span inside this container.\n    if (originalHTML.indexOf('textFitted') === -1) {\n      innerSpan = document.createElement('span');\n      innerSpan.className = 'textFitted';\n      // Inline block ensure it takes on the size of its contents, even if they are enclosed\n      // in other tags like <p>\n      innerSpan.style['display'] = 'inline-block';\n      innerSpan.innerHTML = originalHTML;\n      el.innerHTML = '';\n      el.appendChild(innerSpan);\n    } else {\n      // Reprocessing.\n      innerSpan = el.querySelector('span.textFitted');\n      // Remove vertical align if we're reprocessing.\n      if (hasClass(innerSpan, 'textFitAlignVert')){\n        innerSpan.className = innerSpan.className.replace('textFitAlignVert', '');\n        innerSpan.style['height'] = '';\n        el.className.replace('textFitAlignVertFlex', '');\n      }\n    }\n\n    // Prepare & set alignment\n    if (settings.alignHoriz) {\n      el.style['text-align'] = 'center';\n      innerSpan.style['text-align'] = 'center';\n    }\n\n    // Check if this string is multiple lines\n    // Not guaranteed to always work if you use wonky line-heights\n    var multiLine = settings.multiLine;\n    if (settings.detectMultiLine && !multiLine &&\n        innerSpan.scrollHeight >= parseInt(window.getComputedStyle(innerSpan)['font-size'], 10) * 2){\n      multiLine = true;\n    }\n\n    // If we're not treating this as a multiline string, don't let it wrap.\n    if (!multiLine) {\n      el.style['white-space'] = 'nowrap';\n    }\n\n    low = settings.minFontSize + 1;\n    high = settings.maxFontSize + 1;\n\n    // Binary search for best fit\n    while (low <= high) {\n      mid = parseInt((low + high) / 2, 10);\n      innerSpan.style.fontSize = mid + 'px';\n      if(innerSpan.scrollWidth <= originalWidth && (settings.widthOnly || innerSpan.scrollHeight <= originalHeight)){\n        low = mid + 1;\n      } else {\n        high = mid - 1;\n      }\n    }\n    // Sub 1 at the very end, this is closer to what we wanted.\n    innerSpan.style.fontSize = (mid - 1) + 'px';\n\n    // Our height is finalized. If we are aligning vertically, set that up.\n    if (settings.alignVert) {\n      addStyleSheet();\n      var height = innerSpan.scrollHeight;\n      if (window.getComputedStyle(el)['position'] === \"static\"){\n        el.style['position'] = 'relative';\n      }\n      if (!hasClass(innerSpan, \"textFitAlignVert\")){\n        innerSpan.className = innerSpan.className + \" textFitAlignVert\";\n      }\n      innerSpan.style['height'] = height + \"px\";\n      if (settings.alignVertWithFlexbox && !hasClass(el, \"textFitAlignVertFlex\")) {\n        el.className = el.className + \" textFitAlignVertFlex\";\n      }\n    }\n  }\n\n  // Calculate height without padding.\n  function innerHeight(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientHeight -\n      parseInt(style.getPropertyValue('padding-top'), 10) -\n      parseInt(style.getPropertyValue('padding-bottom'), 10);\n  }\n\n  // Calculate width without padding.\n  function innerWidth(el){\n    var style = window.getComputedStyle(el, null);\n    return el.clientWidth -\n      parseInt(style.getPropertyValue('padding-left'), 10) -\n      parseInt(style.getPropertyValue('padding-right'), 10);\n  }\n\n  //Returns true if it is a DOM element\n  function isElement(o){\n    return (\n      typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n      o && typeof o === \"object\" && o !== null && o.nodeType === 1 && typeof o.nodeName===\"string\"\n    );\n  }\n\n  function hasClass(element, cls) {\n    return (' ' + element.className + ' ').indexOf(' ' + cls + ' ') > -1;\n  }\n\n  // Better than a stylesheet dependency\n  function addStyleSheet() {\n    if (document.getElementById(\"textFitStyleSheet\")) return;\n    var style = [\n      \".textFitAlignVert{\",\n        \"position: absolute;\",\n        \"top: 0; right: 0; bottom: 0; left: 0;\",\n        \"margin: auto;\",\n        \"display: flex;\",\n        \"justify-content: center;\",\n        \"flex-direction: column;\",\n      \"}\",\n      \".textFitAlignVertFlex{\",\n        \"display: flex;\",\n      \"}\",\n      \".textFitAlignVertFlex .textFitAlignVert{\",\n        \"position: static;\",\n      \"}\",].join(\"\");\n\n    var css = document.createElement(\"style\");\n    css.type = \"text/css\";\n    css.id = \"textFitStyleSheet\";\n    css.innerHTML = style;\n    document.body.appendChild(css);\n  }\n}));\n"]}